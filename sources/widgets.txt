.. _widgets:

Widgets
=======

Your widget is the dedicated area on which you will display your very
interesting data on the screens of your customers (I mean end-users).

Here is a widget example (in fact, it is the `hello_world <http://github.com/pelletier/cupd/tree/master/plugins/hello_world/>`_ example):

.. code-block:: javascript

    /*
     * Hello world
     *
     * An example widget for Cupd.
     * It is meant to show the minimal requirements for building a working Cupd
     * widget. Please read the corresponding wiki pages for more informations.
     */
    
    /* Your exported code must stay in a single object */
    my_code = {};
    
    /* The refresh function is called by the dashboard to force your widget to
     * display nicely (for instance when the user loads the page, or changes
     * critical display settings).
     */
    my_code.refresh = function(){
        var me = $('#'+this.name);
        me.html("<h3>Hello, world!</h3><p></p>");
        me.css('color', 'white');
    };
    
    /* The update function is called when your widget receives some informations
     * from its server-side friendly plugin.
     * The data argument is the raw data received by the dashboard.
     */
    my_code.update = function(data){
        $('#'+this.name+' p').html(data.text);
    };
    
    /* Finaly register your code into the client's dashboard code base.
     * 'hello_world' is the slugified name of the plugin. It is the plugin
     * identifier, so stay consistent otherwise your code will be doomed.
     */
    code_base['hello_world'] = my_code;

Widgets are plain javascript. However, please note two things: firstly, the
dashboard is `jQuery <http://jquery.com/>`_ powered, hence it is available to
you, so feel free to use it . Secondly, Cupd exposes an API and provides some
guidelines. It is very recommended to use them *both*.

Concerning the file system, your widget has a dedicated space to live in:
``/plugins/<your_widget_name>/`` (I will refer to it has "your widget space" in
the rest of the document").

    **Guideline:**
    Use only alphanumeric characters and underscores in your widget
    name. And avoid using spaces too.


Needed skeleton
---------------

You absolutely need one file in your widget space: ``widget.js``. It will
contains your code which will handle display refreshes and data payloads.
This code is loaded dynamically by the user's browser. You must create an empty
object which is going to be registered to the dashboard. It must contains two
functions: ``update(data)`` and ``refresh()``. Then you must register your
widget to the dashboard using the ``code_base`` global variable. Let's dig
a little deeper on all of this.


Your widget object
------------------

In all your functions, you can use the ``this`` statement to refer to your
widget. It is the same object you register with the ``code_base`` variable, but
it also contains:

- The ``name`` property, which is unique ID generated by the dashboard to refer
  as the current instance of your widget.
- (nothing else for now: more to come)


Handling refreshes
------------------

First of all, you need to know that when your widget is loaded (ie, when the
users connects to Cupd), the dashboard automatically creates a ``div`` on the
page, with your widget's name as its ``id`` field. What is going to be
displayed in this div is up to you, and the ``refresh()`` method.

Example:

.. code-block:: javascript

    my_code.refresh = function(){
        var me = $('#'+this.name); // We first grab that so important div
        me.html("<h3>Hello, world!</h3><p></p>"); // Let's display the skeleton
                                                  // of widget.
        me.css('color', 'white'); // Add some style
    };

Not really difficult. The refresh function is not called very often: only when
the user loads the page, and if he plays enough with its window this so that
the engine is not able to redraw widgets properly (which is rather rare).

Handling incoming data
----------------------

Because you want to display data, you must receive them first. It is the main
purpose of the ``update(data)`` method. It is fired each time some new data for
your widget is received by the dashboard. ``data`` is a Javascript object: the
payload sent by your service has been de-serialized by the dashboard.

Example:

.. code-block:: javascript

    my_code.update = function(data){
        $('#'+this.name+' p').html(data.text);
    };


In this example, the widget receives an hash, containing one key: ``text``, so
it changes the value of the previously created ``<p>`` (see refresh) to the
freshly received text.


Registering
-----------

It's the easiest part, and also the most important. Once all your methods have
been implemented, you must register your widget with its proper name using the
global ``code_base`` hash.

Example:

.. code-block:: javascript

    code_block['my_widget_name'] = my_code;

And... it is over! You've done your job and your users are ready to enjoy your
real time data.
